Index: lib/themes/color_scheme.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\n\nclass GruvboxDarkPalette {\n  GruvboxDarkPalette._();\n\n  static const bg = Color(0xFF282828);\n  static const bg0h = Color(0xFF1d2021);\n  static const bg0s = Color(0xFF32302f);\n  static const bg1 = Color(0xFF3c3836);\n  static const bg2 = Color(0xFF504945);\n  static const bg3 = Color(0xFF665c54);\n  static const bg4 = Color(0xFF7c6f64);\n\n  static const fg = Color(0xFFebdbb2);\n  static const fg0 = Color(0xFFfbf1c7);\n  static const fg1 = Color(0xFFebdbb2);\n  static const fg2 = Color(0xFFd5c4a1);\n  static const fg3 = Color(0xFFbdae93);\n  static const fg4 = Color(0xFFa89984);\n\n  static const darkRed = Color(0xFFcc241d);\n  static const lightRed = Color(0xFFfb4934);\n  static const darkGreen = Color(0xFF98971a);\n  static const lightGreen = Color(0xFFb8bb26);\n  static const darkYellow = Color(0xFFd79921);\n  static const lightYellow = Color(0xFFfabd2f);\n  static const darkBlue = Color(0xFF458588);\n  static const lightBlue = Color(0xFF83a598);\n  static const darkPurple = Color(0xFFb16268);\n  static const lightPurple = Color(0xFFd3869b);\n  static const darkAqua = Color(0xFF689d6a);\n  static const lightAqua = Color(0xFF8ec07c);\n  static const darkGrey = Color(0xFFa89984);\n  static const lightGrey = Color(0xFFebdbb2);\n  static const darkOrange = Color(0xFFd65d0e);\n  static const lightOrange = Color(0xFFfe8019);\n}\n\nclass GruvboxLightPalette {\n  GruvboxLightPalette._();\n\n  static const bg = Color(0xffc5def6);\n  static const bg0h = Color(0xffa3bde3);\n  static const bg0s = Color(0xff91beea);\n  static const bg1 = Color(0xff699bd7);\n  static const bg2 = Color(0xff4784c7);\n  static const bg3 = Color(0xff2f92ec);\n  static const bg4 = Color(0xff157adc);\n\n  static const fg = Color(0xFF3c3836);\n  static const fg0 = Color(0xFF282828);\n  static const fg1 = Color(0xFF3c3836);\n  static const fg2 = Color(0xFF504945);\n  static const fg3 = Color(0xFF665c54);\n  static const fg4 = Color(0xFF7c6f64);\n\n  static const darkRed = Color(0xFF9d0006);\n  static const lightRed = Color(0xFFcc241d);\n  static const darkGreen = Color(0xFF79740e);\n  static const lightGreen = Color(0xFF98971a);\n  static const darkYellow = Color(0xFFb57614);\n  static const lightYellow = Color(0xFFd79921);\n  static const darkBlue = Color(0xFF076678);\n  static const lightBlue = Color(0xFF458588);\n  static const darkPurple = Color(0xFF8f3f71);\n  static const lightPurple = Color(0xFFb16286);\n  static const darkAqua = Color(0xFF427b58);\n  static const lightAqua = Color(0xFF689d6a);\n  static const darkGrey = Color(0xFF7c6f64);\n  static const lightGrey = Color(0xFF928374);\n  static const darkOrange = Color(0xFFaf3a03);\n  static const lightOrange = Color(0xFFd65d0e);\n}\n\nconst ColorScheme lightColorScheme = ColorScheme(\n  primary: GruvboxLightPalette.fg,\n  onPrimary: GruvboxLightPalette.bg0h,\n  primaryContainer: GruvboxLightPalette.darkPurple,\n  onPrimaryContainer: GruvboxLightPalette.bg0h,\n  secondary: GruvboxLightPalette.fg1,\n  onSecondary: GruvboxLightPalette.bg1,\n  secondaryContainer: GruvboxLightPalette.darkBlue,\n  onSecondaryContainer: GruvboxLightPalette.bg0h,\n  tertiary: GruvboxLightPalette.bg2,\n  onTertiary: GruvboxLightPalette.fg4,\n  background: GruvboxLightPalette.bg0h,\n  onBackground: GruvboxLightPalette.fg2,\n  error: GruvboxLightPalette.darkRed,\n  onError: GruvboxLightPalette.bg0h,\n  surface: GruvboxLightPalette.bg1,\n  onSurface: GruvboxLightPalette.fg,\n  outline: GruvboxLightPalette.darkOrange,\n  brightness: Brightness.light,\n);\n\nconst ColorScheme darkColorScheme = ColorScheme(\n  primary: GruvboxDarkPalette.fg,\n  onPrimary: GruvboxDarkPalette.bg0h,\n  primaryContainer: GruvboxDarkPalette.darkPurple,\n  onPrimaryContainer: GruvboxDarkPalette.fg0,\n  secondary: GruvboxDarkPalette.fg1,\n  onSecondary: GruvboxDarkPalette.bg1,\n  secondaryContainer: GruvboxDarkPalette.darkBlue,\n  onSecondaryContainer: GruvboxDarkPalette.bg0h,\n  tertiary: GruvboxDarkPalette.bg2,\n  onTertiary: GruvboxDarkPalette.fg4,\n  background: GruvboxDarkPalette.bg0h,\n  onBackground: GruvboxDarkPalette.fg2,\n  error: GruvboxDarkPalette.darkRed,\n  onError: GruvboxDarkPalette.bg0h,\n  surface: GruvboxDarkPalette.bg1,\n  onSurface: GruvboxDarkPalette.fg,\n  outline: GruvboxDarkPalette.lightOrange,\n  brightness: Brightness.dark,\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/themes/color_scheme.dart b/lib/themes/color_scheme.dart
--- a/lib/themes/color_scheme.dart	(revision c4195a4d5b748f509b7de4dbd5843504581485d1)
+++ b/lib/themes/color_scheme.dart	(date 1709321421543)
@@ -39,13 +39,13 @@
 class GruvboxLightPalette {
   GruvboxLightPalette._();
 
-  static const bg = Color(0xffc5def6);
-  static const bg0h = Color(0xffa3bde3);
-  static const bg0s = Color(0xff91beea);
-  static const bg1 = Color(0xff699bd7);
-  static const bg2 = Color(0xff4784c7);
-  static const bg3 = Color(0xff2f92ec);
-  static const bg4 = Color(0xff157adc);
+  static const bg = Color(0xfff6f6f6);
+  static const bg0h = Color(0xfff4f5f6);
+  static const bg0s = Color(0xfff6f6f6);
+  static const bg1 = Color(0xffffffff);
+  static const bg2 = Color(0xfffcfcfc);
+  static const bg3 = Color(0xfff3f4f5);
+  static const bg4 = Color(0xffedeff1);
 
   static const fg = Color(0xFF3c3836);
   static const fg0 = Color(0xFF282828);
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name: loc\ndescription: Free and open-source location-based reminder for Android\nrepository: https://github.com/AbdeltwabMF/loc\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\nversion: 0.6.4+64\n\nenvironment:\n  flutter: 3.7.5\n  sdk: '>=2.18.6 <3.0.0'\n\ndependencies:\n  flutter:\n    sdk: flutter\n  cupertino_icons: ^1.0.5\n  flutter_map: ^3.1.0\n  flutter_ringtone_player: ^3.2.0\n  geolocator: ^9.0.2\n  hive: ^2.2.3\n  hive_flutter: ^1.1.0\n  http: ^0.13.5\n  latlong2: ^0.8.1\n  provider: ^6.0.5\n  url_launcher: ^6.1.8\n  uuid: ^3.0.7\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^2.0.0\n  hive_generator: ^2.0.0\n  build_runner: ^2.3.3\n  flutter_launcher_icons: ^0.12.0\n\nflutter:\n  assets:\n    - assets/ca/lets-encrypt-r3.pem\n    - assets/images/icon.png\n    - assets/images/featureGraphic.png\n    - assets/images/background.jpg\n  fonts:\n      - family: Fantasque\n        fonts:\n          - asset: assets/fonts/Fantasque Sans Mono Regular Nerd Font.ttf\n      - family: NotoArabic\n        fonts:\n          - asset: assets/fonts/NotoSansArabic-Regular.ttf\n  uses-material-design: true\n\nflutter_icons:\n  android: \"ic_launcher\"\n  image_path: \"assets/images/icon.png\"\n  min_sdk_android: 21
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
--- a/pubspec.yaml	(revision c4195a4d5b748f509b7de4dbd5843504581485d1)
+++ b/pubspec.yaml	(date 1709322404940)
@@ -42,10 +42,10 @@
       - family: Fantasque
         fonts:
           - asset: assets/fonts/Fantasque Sans Mono Regular Nerd Font.ttf
-      - family: NotoArabic
+      - family: Arial
         fonts:
-          - asset: assets/fonts/NotoSansArabic-Regular.ttf
-  uses-material-design: true
+          - asset: assets/fonts/Arial.ttf
+  uses-material-design: false
 
 flutter_icons:
   android: "ic_launcher"
Index: lib/pages/home.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:ui';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_ringtone_player/flutter_ringtone_player.dart';\nimport 'package:loc/data/app_states.dart';\nimport 'package:loc/pages/arrival_list.dart';\nimport 'package:loc/pages/favorites_list.dart';\nimport 'package:loc/pages/reminders_search.dart';\nimport 'package:loc/pages/settings.dart';\nimport 'package:loc/pages/reminders_new.dart';\nimport 'package:loc/utils/database_ops.dart';\nimport 'package:loc/utils/location.dart';\nimport 'package:loc/widgets/bottom_nav_bar.dart';\nimport 'package:loc/pages/reminders_list.dart';\nimport 'package:provider/provider.dart';\n\nclass HomePage extends StatefulWidget {\n  const HomePage({super.key});\n\n  @override\n  State<HomePage> createState() => _HomePage();\n}\n\nclass _HomePage extends State<HomePage> with WidgetsBindingObserver {\n  static const List<Widget> _navWidgetList = [\n    RemindersList(),\n    FavoritesList(),\n    ArrivalList(),\n    Settings(),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    positionStream.cancel();\n    super.dispose();\n  }\n\n  @override\n  Future<bool> didPopRoute() async {\n    writeData(context);\n    return false;\n  }\n\n  @override\n  void didChangeAppLifecycleState(AppLifecycleState state) {\n    switch (state) {\n      case AppLifecycleState.resumed:\n        readData(context);\n        break;\n      case AppLifecycleState.paused:\n        writeData(context);\n        break;\n      case AppLifecycleState.detached:\n        writeData(context);\n        break;\n      default:\n        break;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final appStates = Provider.of<AppStates>(context);\n\n    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {\n      if (context.mounted) {\n        if (appStates.listening == false) {\n          getCurrentLocation().then((value) {\n            appStates.setCurrent(value.position);\n            handlePositionUpdates(context);\n            appStates.setListening(true);\n          });\n        }\n\n        if (appStates.loaded == false) {\n          readData(context);\n          appStates.setLoaded(true);\n        }\n      }\n    });\n\n    return WillPopScope(\n      onWillPop: () async {\n        if (appStates.selectedAll().isNotEmpty) {\n          appStates.selectedClear();\n          return false;\n        }\n        writeData(context);\n        return true;\n      },\n      child: Stack(\n        children: [\n          ImageFiltered(\n            imageFilter: ImageFilter.blur(\n              sigmaX: 2,\n              sigmaY: 2,\n            ),\n            child: Image.asset('assets/images/background.jpg'),\n          ),\n          Scaffold(\n            backgroundColor:\n                Theme.of(context).colorScheme.background.withOpacity(0.8),\n            resizeToAvoidBottomInset: false,\n            appBar: AppBar(\n              actions: [\n                appStates.bottomNavBarIndex == 1 &&\n                        appStates.favoriteAll().isNotEmpty\n                    ? IconButton(\n                        onPressed: () {\n                          appStates.favoriteClear();\n                        },\n                        icon: const Icon(\n                          Icons.clear_rounded,\n                          size: 32,\n                        ),\n                      )\n                    : const SizedBox.shrink(),\n                appStates.selectedAll().isNotEmpty\n                    ? IconButton(\n                        onPressed: () {\n                          final selected = appStates.selectedAll();\n                          for (int i = 0; i < selected.length; ++i) {\n                            appStates.favoriteAdd(\n                                appStates.reminderRead(id: selected[i])!.place);\n                          }\n                          appStates.selectedClear();\n                        },\n                        icon: const Icon(\n                          Icons.favorite_rounded,\n                          size: 32,\n                        ),\n                      )\n                    : const SizedBox.shrink(),\n                appStates.selectedAll().isNotEmpty\n                    ? IconButton(\n                        onPressed: () {\n                          final selected = appStates.selectedAll();\n                          for (int i = 0; i < selected.length; ++i) {\n                            appStates.reminderDelete(id: selected[i]);\n                          }\n                          appStates.selectedClear();\n                        },\n                        icon: const Icon(\n                          Icons.delete_rounded,\n                          size: 32,\n                        ),\n                      )\n                    : const SizedBox.shrink(),\n                appStates.selectedAll().isNotEmpty\n                    ? IconButton(\n                        onPressed: () {\n                          if (appStates.selectedAll().length == 1) {\n                            final reminder = appStates.reminderRead(\n                                id: appStates.selectedAll()[0])!;\n\n                            Navigator.of(context).push<void>(\n                              MaterialPageRoute<void>(\n                                builder: (context) {\n                                  return RemindersNew(\n                                    appBarTitle: 'Edit Reminder',\n                                    title: reminder.title,\n                                    latitude: reminder.place.position.latitude\n                                        .toString(),\n                                    longitude: reminder.place.position.longitude\n                                        .toString(),\n                                    radius: reminder.place.radius.toString(),\n                                    notes: reminder.notes,\n                                    id: reminder.id,\n                                  );\n                                },\n                              ),\n                            );\n                            appStates.selectedClear();\n                          }\n                          appStates.selectedClear();\n                        },\n                        icon: const Icon(\n                          Icons.edit_rounded,\n                          size: 32,\n                        ),\n                      )\n                    : const SizedBox.shrink(),\n                appStates.selectedAll().isNotEmpty\n                    ? const SizedBox.shrink()\n                    : appStates.bottomNavBarIndex == 0\n                        ? IconButton(\n                            onPressed: () {\n                              Navigator.of(context).push<void>(\n                                MaterialPageRoute<void>(\n                                  builder: (context) {\n                                    return const RemindersSearch();\n                                  },\n                                ),\n                              );\n                            },\n                            icon: const Icon(\n                              Icons.search_rounded,\n                              size: 32,\n                            ),\n                          )\n                        : const SizedBox.shrink(),\n                appStates.selectedAll().isNotEmpty\n                    ? const SizedBox.shrink()\n                    : IconButton(\n                        onPressed: () {\n                          if (appStates.notify == true) {\n                            FlutterRingtonePlayer.stop();\n                            appStates.setRinging(false);\n                            appStates.setNotify(false);\n                          } else {\n                            appStates.setNotify(true);\n                          }\n                        },\n                        icon: Icon(\n                          appStates.notify == true\n                              ? Icons.alarm_on_rounded\n                              : Icons.alarm_off_rounded,\n                          color: appStates.notify == true\n                              ? Theme.of(context).colorScheme.onSurface\n                              : Theme.of(context).colorScheme.onTertiary,\n                          size: 32,\n                        ),\n                      ),\n              ],\n              elevation: 0,\n              leading: null,\n              title: appStates.selectedAll().isNotEmpty\n                  ? IconButton(\n                      icon: const Icon(\n                        Icons.close_rounded,\n                        size: 32,\n                      ),\n                      onPressed: () {\n                        appStates.selectedClear();\n                      },\n                    )\n                  : const Text(\n                      'Loc',\n                    ),\n            ),\n            bottomNavigationBar: const AppBottomNavBar(),\n            floatingActionButton: appStates.bottomNavBarIndex != 0\n                ? null\n                : FloatingActionButton(\n                    elevation: 0,\n                    onPressed: () {\n                      Navigator.of(context).push<void>(\n                        MaterialPageRoute<void>(\n                          builder: (context) {\n                            return RemindersNew();\n                          },\n                        ),\n                      );\n                    },\n                    child: const Icon(\n                      Icons.add_alarm_rounded,\n                    ),\n                  ),\n            body: SafeArea(\n              child: _navWidgetList.elementAt(appStates.bottomNavBarIndex),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/home.dart b/lib/pages/home.dart
--- a/lib/pages/home.dart	(revision c4195a4d5b748f509b7de4dbd5843504581485d1)
+++ b/lib/pages/home.dart	(date 1709321631650)
@@ -242,7 +242,7 @@
                       },
                     )
                   : const Text(
-                      'Loc',
+                      'Location Based Alarm',
                     ),
             ),
             bottomNavigationBar: const AppBottomNavBar(),
